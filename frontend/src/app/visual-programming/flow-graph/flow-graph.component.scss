.editor-wrapper {
  position: relative;
  width: 100%;
  height: 100%;
  overflow: hidden;
}

::ng-deep app-flow-graph {
  .f-line-alignment {
    .f-line {
      background-color: var(--vp-line-alignment-color);
    }
  }

  .f-background {
    circle {
      fill: var(--vp-line-alignment-color);
    }
  }
  .f-connection {
    z-index: 2;
    filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.3));
    .f-connection-drag-handle {
      fill: transparent;
    }

    .f-connection-selection {
      fill: none;
      stroke: #1d1d1d;
      stroke-width: 5;
      cursor: pointer;
    }

    .f-connection-path {
      fill: none;
      stroke-width: 2;
    }

    &.f-selected {
      .f-connection-path {
        stroke: var(--db-primary-1);
      }

      .f-marker {
        path,
        circle {
          fill: var(--db-primary-1);
        }
      }
      .connection-center {
        display: flex;
      }
    }

    &:hover {
      .f-connection-selection {
        stroke: var(--db-primary-1);
        opacity: 0.1;
      }
    }

    &.f-snap-connection {
      .f-connection-path {
        stroke: var(--db-snap-connection);
        stroke-width: 2px;
        /* Add dash pattern and animation */
        stroke-dasharray: 6 3;
        animation: dashOffset 0.5s linear infinite;
      }

      .f-marker {
        path,
        circle {
          fill: var(--db-snap-connection);
        }
      }

      .f-connection-selection {
        fill: transparent !important;
        stroke: transparent !important;
      }
    }

    &.f-connection-for-create {
      .f-connection-path {
        stroke: var(--db-primary-1);
        stroke-width: 2px;
      }
      .f-marker {
        path,
        circle {
          fill: var(--db-primary-1);
        }
      }
      .f-connection-selection {
        fill: transparent !important;
        stroke: transparent !important;
      }
    }

    /* Styling for dashed connections (virtual) */
    &.dashed-connection {
      .f-connection-path {
        stroke-dasharray: 4 2;
      }
    }

    /* Connection center styling */
    .connection-center {
      display: none; /* Only show when connection is selected */
      position: absolute;
      gap: 0.75rem; /* Increased gap to 0.75rem (12px) from 0.375rem (6px) */
      transform: translate(-50%, -50%);

      .icon-button {
        width: 24px;
        height: 24px;
        border-radius: 4px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        background-color: #2a2a2a;
        border: 1px solid #444;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        transition: all 0.15s cubic-bezier(0.25, 0.8, 0.25, 1); /* Smooth animation for click effect */

        &:hover {
          background-color: #3a3a3a;
        }

        /* Click effect - shrink when clicked */
        &:active {
          transform: scale(0.85); /* Shrink to 85% size when clicked */
          background-color: #444; /* Slightly darker background for pressed state */
        }

        i {
          font-size: 14px;
        }

        &.plus-icon {
          i {
            color: var(--accent-color, #2196f3);
          }
        }

        &.delete-icon {
          i {
            color: #aaa; /* Gray by default instead of red */
            transition: color 0.2s ease; /* Smooth transition for color change */
          }

          &:hover {
            background-color: rgba(
              255,
              82,
              82,
              0.1
            ); /* Light red background on hover */

            i {
              color: #ff5252; /* Red color on hover */
            }
          }

          &:active {
            background-color: rgba(
              255,
              82,
              82,
              0.2
            ); /* Darker red background when active */
          }
        }

        &.disabled {
          opacity: 0.5;
          cursor: not-allowed;
          pointer-events: none; /* Prevents hover effects */
        }
      }
    }
  }

  .f-selection-area {
    background-color: var(--vp-selection-area-color);
  }

  .f-minimap {
    background-color: var(--vp-minimap-color);
    bottom: 16px;
    right: 16px;
    width: 180px;
    height: 180px;

    .f-minimap-node {
      fill: var(--vp-minimap-node-color);

      &.f-selected {
        fill: var(--vp-minimap-selected-node-color);
      }
    }

    .f-minimap-view {
      fill: var(--vp-minimap-view-color);
    }
  }
  .f-connections-dragging {
    .f-component.f-node-input.f-node-output.port-circle.f-node-input-can-be-connected-to
      ~ .port-label {
      display: block;
    }

    .f-component.f-node-input.f-node-output.port-circle.f-node-input-can-be-connected-to {
      transform: translate(-50%, -50%) scale(1.3); // Reduced from 1.5 to 1.3
      transition: transform 0.25s ease-in-out;
      position: relative;

      &::before {
        content: "";
        position: absolute;
        top: -3px; // Reduced from -2px
        left: -3px; // Reduced from -2px
        right: -2px; // Reduced from -2px
        bottom: -2px; // Reduced from -2px
        border: 1.5px dashed #b4b4b4; // Made border slightly thinner
        border-radius: 50%;
        pointer-events: none;
        animation: rotateBorder 3s linear infinite;
      }
    }
  }
  // Connection center: hidden by default
  .connection-center {
    display: none;
    align-items: center;
    justify-content: center;
    gap: 0.5rem; // Reduce space between buttons
  }
}

/* Updated parent component CSS */
.top-left-actions {
  position: absolute;
  top: 1rem;
  left: 1rem;
  z-index: 10;
  display: flex;
  flex-direction: row;
  align-items: flex-start;
  gap: 1rem; /* Space between search and nodes panel */
  max-height: calc(
    100vh - 2rem
  ); /* Full viewport height minus top and bottom margins */
}

/* Make sure the child components respect the parent's height */
.top-left-actions > * {
  display: flex;
  flex-direction: column;
  max-height: calc(
    100vh - 3rem
  ); /* Slightly less than parent to avoid overflow */
}
@keyframes rotateBorder {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}
@keyframes dashOffset {
  0% {
    stroke-dashoffset: 20;
  }
  100% {
    stroke-dashoffset: 0;
  }
}
