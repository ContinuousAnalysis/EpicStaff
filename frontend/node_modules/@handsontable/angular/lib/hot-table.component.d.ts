import { AfterViewInit, NgZone, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import Handsontable from 'handsontable/base';
import { HotTableRegisterer } from './hot-table-registerer.service';
import { HotSettingsResolver } from './hot-settings-resolver.service';
import { HotColumnComponent } from './hot-column.component';
import * as i0 from "@angular/core";
export declare class HotTableComponent implements AfterViewInit, OnChanges, OnDestroy {
    private _hotTableRegisterer;
    private _hotSettingsResolver;
    ngZone: NgZone;
    container: any;
    private __hotInstance;
    private columnsComponents;
    settings: Handsontable.GridSettings;
    hotId: string;
    activeHeaderClassName: Handsontable.GridSettings['activeHeaderClassName'];
    allowEmpty: Handsontable.GridSettings['allowEmpty'];
    allowHtml: Handsontable.GridSettings['allowHtml'];
    allowInsertColumn: Handsontable.GridSettings['allowInsertColumn'];
    allowInsertRow: Handsontable.GridSettings['allowInsertRow'];
    allowInvalid: Handsontable.GridSettings['allowInvalid'];
    allowRemoveColumn: Handsontable.GridSettings['allowRemoveColumn'];
    allowRemoveRow: Handsontable.GridSettings['allowRemoveRow'];
    ariaTags: Handsontable.GridSettings['ariaTags'];
    autoColumnSize: Handsontable.GridSettings['autoColumnSize'];
    autoRowSize: Handsontable.GridSettings['autoRowSize'];
    autoWrapCol: Handsontable.GridSettings['autoWrapCol'];
    autoWrapRow: Handsontable.GridSettings['autoWrapRow'];
    bindRowsWithHeaders: Handsontable.GridSettings['bindRowsWithHeaders'];
    cell: Handsontable.GridSettings['cell'];
    cells: Handsontable.GridSettings['cells'];
    checkedTemplate: Handsontable.GridSettings['checkedTemplate'];
    className: Handsontable.GridSettings['className'];
    colHeaders: Handsontable.GridSettings['colHeaders'];
    collapsibleColumns: Handsontable.GridSettings['collapsibleColumns'];
    columnHeaderHeight: Handsontable.GridSettings['columnHeaderHeight'];
    columns: Handsontable.GridSettings['columns'];
    columnSorting: Handsontable.GridSettings['columnSorting'];
    columnSummary: Handsontable.GridSettings['columnSummary'];
    colWidths: Handsontable.GridSettings['colWidths'];
    commentedCellClassName: Handsontable.GridSettings['commentedCellClassName'];
    comments: Handsontable.GridSettings['comments'];
    contextMenu: Handsontable.GridSettings['contextMenu'];
    copyable: Handsontable.GridSettings['copyable'];
    copyPaste: Handsontable.GridSettings['copyPaste'];
    correctFormat: Handsontable.GridSettings['correctFormat'];
    currentColClassName: Handsontable.GridSettings['currentColClassName'];
    currentHeaderClassName: Handsontable.GridSettings['currentHeaderClassName'];
    currentRowClassName: Handsontable.GridSettings['currentRowClassName'];
    customBorders: Handsontable.GridSettings['customBorders'];
    data: Handsontable.GridSettings['data'];
    dataDotNotation: Handsontable.GridSettings['dataDotNotation'];
    dataSchema: Handsontable.GridSettings['dataSchema'];
    dateFormat: Handsontable.GridSettings['dateFormat'];
    datePickerConfig: Handsontable.GridSettings['datePickerConfig'];
    defaultDate: Handsontable.GridSettings['defaultDate'];
    tabNavigation: Handsontable.GridSettings['tabNavigation'];
    disableVisualSelection: Handsontable.GridSettings['disableVisualSelection'];
    dragToScroll: Handsontable.GridSettings['dragToScroll'];
    dropdownMenu: Handsontable.GridSettings['dropdownMenu'];
    editor: Handsontable.GridSettings['editor'];
    enterBeginsEditing: Handsontable.GridSettings['enterBeginsEditing'];
    enterMoves: Handsontable.GridSettings['enterMoves'];
    fillHandle: Handsontable.GridSettings['fillHandle'];
    filter: Handsontable.GridSettings['filter'];
    filteringCaseSensitive: Handsontable.GridSettings['filteringCaseSensitive'];
    filters: Handsontable.GridSettings['filters'];
    fixedColumnsLeft: Handsontable.GridSettings['fixedColumnsLeft'];
    fixedColumnsStart: Handsontable.GridSettings['fixedColumnsStart'];
    fixedRowsBottom: Handsontable.GridSettings['fixedRowsBottom'];
    fixedRowsTop: Handsontable.GridSettings['fixedRowsTop'];
    formulas: Handsontable.GridSettings['formulas'];
    fragmentSelection: Handsontable.GridSettings['fragmentSelection'];
    headerClassName: Handsontable.GridSettings['headerClassName'];
    height: Handsontable.GridSettings['height'];
    hiddenColumns: Handsontable.GridSettings['hiddenColumns'];
    hiddenRows: Handsontable.GridSettings['hiddenRows'];
    invalidCellClassName: Handsontable.GridSettings['invalidCellClassName'];
    imeFastEdit: Handsontable.GridSettings['imeFastEdit'];
    label: Handsontable.GridSettings['label'];
    language: Handsontable.GridSettings['language'];
    layoutDirection: Handsontable.GridSettings['layoutDirection'];
    licenseKey: Handsontable.GridSettings['licenseKey'];
    locale: Handsontable.GridSettings['locale'];
    manualColumnFreeze: Handsontable.GridSettings['manualColumnFreeze'];
    manualColumnMove: Handsontable.GridSettings['manualColumnMove'];
    manualColumnResize: Handsontable.GridSettings['manualColumnResize'];
    manualRowMove: Handsontable.GridSettings['manualRowMove'];
    manualRowResize: Handsontable.GridSettings['manualRowResize'];
    maxCols: Handsontable.GridSettings['maxCols'];
    maxRows: Handsontable.GridSettings['maxRows'];
    mergeCells: Handsontable.GridSettings['mergeCells'];
    minCols: Handsontable.GridSettings['minCols'];
    minRows: Handsontable.GridSettings['minRows'];
    minSpareCols: Handsontable.GridSettings['minSpareCols'];
    minSpareRows: Handsontable.GridSettings['minSpareRows'];
    multiColumnSorting: Handsontable.GridSettings['multiColumnSorting'];
    navigableHeaders: Handsontable.GridSettings['navigableHeaders'];
    nestedHeaders: Handsontable.GridSettings['nestedHeaders'];
    nestedRows: Handsontable.GridSettings['nestedRows'];
    noWordWrapClassName: Handsontable.GridSettings['noWordWrapClassName'];
    numericFormat: Handsontable.GridSettings['numericFormat'];
    observeDOMVisibility: Handsontable.GridSettings['observeDOMVisibility'];
    outsideClickDeselects: Handsontable.GridSettings['outsideClickDeselects'];
    persistentState: Handsontable.GridSettings['persistentState'];
    placeholder: Handsontable.GridSettings['placeholder'];
    placeholderCellClassName: Handsontable.GridSettings['placeholderCellClassName'];
    preventOverflow: Handsontable.GridSettings['preventOverflow'];
    preventWheel: Handsontable.GridSettings['preventWheel'];
    readOnly: Handsontable.GridSettings['readOnly'];
    readOnlyCellClassName: Handsontable.GridSettings['readOnlyCellClassName'];
    renderAllColumns: Handsontable.GridSettings['renderAllColumns'];
    renderAllRows: Handsontable.GridSettings['renderAllRows'];
    renderer: Handsontable.GridSettings['renderer'];
    rowHeaders: Handsontable.GridSettings['rowHeaders'];
    rowHeaderWidth: Handsontable.GridSettings['rowHeaderWidth'];
    rowHeights: Handsontable.GridSettings['rowHeights'];
    search: Handsontable.GridSettings['search'];
    selectionMode: Handsontable.GridSettings['selectionMode'];
    selectOptions: Handsontable.GridSettings['selectOptions'];
    skipColumnOnPaste: Handsontable.GridSettings['skipColumnOnPaste'];
    skipRowOnPaste: any;
    sortByRelevance: Handsontable.GridSettings['sortByRelevance'];
    source: Handsontable.GridSettings['source'];
    startCols: Handsontable.GridSettings['startCols'];
    startRows: Handsontable.GridSettings['startRows'];
    stretchH: Handsontable.GridSettings['stretchH'];
    strict: Handsontable.GridSettings['strict'];
    tableClassName: Handsontable.GridSettings['tableClassName'];
    tabMoves: Handsontable.GridSettings['tabMoves'];
    title: Handsontable.GridSettings['title'];
    trimDropdown: Handsontable.GridSettings['trimDropdown'];
    trimRows: Handsontable.GridSettings['nestedRows'];
    trimWhitespace: Handsontable.GridSettings['trimWhitespace'];
    type: Handsontable.GridSettings['type'];
    uncheckedTemplate: Handsontable.GridSettings['uncheckedTemplate'];
    undo: Handsontable.GridSettings['undo'];
    validator: Handsontable.GridSettings['validator'];
    viewportColumnRenderingOffset: Handsontable.GridSettings['viewportColumnRenderingOffset'];
    viewportRowRenderingOffset: Handsontable.GridSettings['viewportRowRenderingOffset'];
    visibleRows: Handsontable.GridSettings['visibleRows'];
    width: Handsontable.GridSettings['width'];
    wordWrap: Handsontable.GridSettings['wordWrap'];
    afterAddChild: Handsontable.GridSettings['afterAddChild'];
    afterAutofill: Handsontable.GridSettings['afterAutofill'];
    afterBeginEditing: Handsontable.GridSettings['afterBeginEditing'];
    afterCellMetaReset: Handsontable.GridSettings['afterCellMetaReset'];
    afterChange: Handsontable.GridSettings['afterChange'];
    afterChangesObserved: Handsontable.GridSettings['afterChangesObserved'];
    afterColumnCollapse: Handsontable.GridSettings['afterColumnCollapse'];
    afterColumnExpand: Handsontable.GridSettings['afterColumnExpand'];
    afterColumnFreeze: Handsontable.GridSettings['afterColumnFreeze'];
    afterColumnMove: Handsontable.GridSettings['afterColumnMove'];
    afterColumnResize: Handsontable.GridSettings['afterColumnResize'];
    afterColumnSequenceChange: Handsontable.GridSettings['afterColumnSequenceChange'];
    afterColumnSort: Handsontable.GridSettings['afterColumnSort'];
    afterColumnUnfreeze: Handsontable.GridSettings['afterColumnUnfreeze'];
    afterContextMenuDefaultOptions: Handsontable.GridSettings['afterContextMenuDefaultOptions'];
    afterContextMenuHide: Handsontable.GridSettings['afterContextMenuHide'];
    afterContextMenuShow: Handsontable.GridSettings['afterContextMenuShow'];
    afterCopy: Handsontable.GridSettings['afterCopy'];
    afterCopyLimit: Handsontable.GridSettings['afterCopyLimit'];
    afterCreateCol: Handsontable.GridSettings['afterCreateCol'];
    afterCreateRow: Handsontable.GridSettings['afterCreateRow'];
    afterCut: Handsontable.GridSettings['afterCut'];
    afterDeselect: Handsontable.GridSettings['afterDeselect'];
    afterDestroy: Handsontable.GridSettings['afterDestroy'];
    afterDetachChild: Handsontable.GridSettings['afterDetachChild'];
    afterDocumentKeyDown: Handsontable.GridSettings['afterDocumentKeyDown'];
    afterDrawSelection: Handsontable.GridSettings['afterDrawSelection'];
    afterDropdownMenuDefaultOptions: Handsontable.GridSettings['afterDropdownMenuDefaultOptions'];
    afterDropdownMenuHide: Handsontable.GridSettings['afterDropdownMenuHide'];
    afterDropdownMenuShow: Handsontable.GridSettings['afterDropdownMenuShow'];
    afterFilter: Handsontable.GridSettings['afterFilter'];
    afterFormulasValuesUpdate: Handsontable.GridSettings['afterFormulasValuesUpdate'];
    afterGetCellMeta: Handsontable.GridSettings['afterGetCellMeta'];
    afterGetColHeader: Handsontable.GridSettings['afterGetColHeader'];
    afterGetColumnHeaderRenderers: Handsontable.GridSettings['afterGetColumnHeaderRenderers'];
    afterGetRowHeader: Handsontable.GridSettings['afterGetRowHeader'];
    afterGetRowHeaderRenderers: Handsontable.GridSettings['afterGetRowHeaderRenderers'];
    afterHideColumns: Handsontable.GridSettings['afterHideColumns'];
    afterHideRows: Handsontable.GridSettings['afterHideRows'];
    afterInit: Handsontable.GridSettings['afterInit'];
    afterLanguageChange: Handsontable.GridSettings['afterLanguageChange'];
    afterListen: Handsontable.GridSettings['afterListen'];
    afterLoadData: Handsontable.GridSettings['afterLoadData'];
    afterMergeCells: Handsontable.GridSettings['afterMergeCells'];
    afterModifyTransformEnd: Handsontable.GridSettings['afterModifyTransformEnd'];
    afterModifyTransformFocus: Handsontable.GridSettings['afterModifyTransformFocus'];
    afterModifyTransformStart: Handsontable.GridSettings['afterModifyTransformStart'];
    afterMomentumScroll: Handsontable.GridSettings['afterMomentumScroll'];
    afterNamedExpressionAdded: Handsontable.GridSettings['afterNamedExpressionAdded'];
    afterNamedExpressionRemoved: Handsontable.GridSettings['afterNamedExpressionRemoved'];
    afterOnCellContextMenu: Handsontable.GridSettings['afterOnCellContextMenu'];
    afterOnCellCornerDblClick: Handsontable.GridSettings['afterOnCellCornerDblClick'];
    afterOnCellCornerMouseDown: Handsontable.GridSettings['afterOnCellCornerMouseDown'];
    afterOnCellMouseDown: Handsontable.GridSettings['afterOnCellMouseDown'];
    afterOnCellMouseOut: Handsontable.GridSettings['afterOnCellMouseOut'];
    afterOnCellMouseOver: Handsontable.GridSettings['afterOnCellMouseOver'];
    afterOnCellMouseUp: Handsontable.GridSettings['afterOnCellMouseUp'];
    afterPaste: Handsontable.GridSettings['afterPaste'];
    afterPluginsInitialized: Handsontable.GridSettings['afterPluginsInitialized'];
    afterRedo: Handsontable.GridSettings['afterRedo'];
    afterRedoStackChange: Handsontable.GridSettings['afterRedoStackChange'];
    afterRefreshDimensions: Handsontable.GridSettings['afterRefreshDimensions'];
    afterRemoveCellMeta: Handsontable.GridSettings['afterRemoveCellMeta'];
    afterRemoveCol: Handsontable.GridSettings['afterRemoveCol'];
    afterRemoveRow: Handsontable.GridSettings['afterRemoveRow'];
    afterRender: Handsontable.GridSettings['afterRender'];
    afterRenderer: Handsontable.GridSettings['afterRenderer'];
    afterRowMove: Handsontable.GridSettings['afterRowMove'];
    afterRowResize: Handsontable.GridSettings['afterRowResize'];
    afterRowSequenceChange: Handsontable.GridSettings['afterRowSequenceChange'];
    afterScrollHorizontally: Handsontable.GridSettings['afterScrollHorizontally'];
    afterScrollVertically: Handsontable.GridSettings['afterScrollVertically'];
    afterScroll: Handsontable.GridSettings['afterScroll'];
    afterSelectColumns: Handsontable.GridSettings['afterSelectColumns'];
    afterSelection: Handsontable.GridSettings['afterSelection'];
    afterSelectionByProp: Handsontable.GridSettings['afterSelectionByProp'];
    afterSelectionEnd: Handsontable.GridSettings['afterSelectionEnd'];
    afterSelectionEndByProp: Handsontable.GridSettings['afterSelectionEndByProp'];
    afterSelectionFocusSet: Handsontable.GridSettings['afterSelectionFocusSet'];
    afterSelectRows: Handsontable.GridSettings['afterSelectRows'];
    afterSetCellMeta: Handsontable.GridSettings['afterSetCellMeta'];
    afterSetDataAtCell: Handsontable.GridSettings['afterSetDataAtCell'];
    afterSetDataAtRowProp: Handsontable.GridSettings['afterSetDataAtRowProp'];
    afterSetSourceDataAtCell: Handsontable.GridSettings['afterSetSourceDataAtCell'];
    afterSheetAdded: Handsontable.GridSettings['afterSheetAdded'];
    afterSheetRenamed: Handsontable.GridSettings['afterSheetRenamed'];
    afterSheetRemoved: Handsontable.GridSettings['afterSheetRemoved'];
    afterTrimRow: Handsontable.GridSettings['afterTrimRow'];
    afterUndo: Handsontable.GridSettings['afterUndo'];
    afterUndoStackChange: Handsontable.GridSettings['afterUndoStackChange'];
    afterUnhideColumns: Handsontable.GridSettings['afterUnhideColumns'];
    afterUnhideRows: Handsontable.GridSettings['afterUnhideRows'];
    afterUnlisten: Handsontable.GridSettings['afterUnlisten'];
    afterUnmergeCells: Handsontable.GridSettings['afterUnmergeCells'];
    afterUntrimRow: Handsontable.GridSettings['afterUntrimRow'];
    afterUpdateData: Handsontable.GridSettings['afterUpdateData'];
    afterUpdateSettings: Handsontable.GridSettings['afterUpdateSettings'];
    afterValidate: Handsontable.GridSettings['afterValidate'];
    afterViewportColumnCalculatorOverride: Handsontable.GridSettings['afterViewportColumnCalculatorOverride'];
    afterViewportRowCalculatorOverride: Handsontable.GridSettings['afterViewportRowCalculatorOverride'];
    afterViewRender: Handsontable.GridSettings['afterViewRender'];
    beforeAddChild: Handsontable.GridSettings['beforeAddChild'];
    beforeAutofill: Handsontable.GridSettings['beforeAutofill'];
    beforeBeginEditing: Handsontable.GridSettings['beforeBeginEditing'];
    beforeCellAlignment: Handsontable.GridSettings['beforeCellAlignment'];
    beforeChange: Handsontable.GridSettings['beforeChange'];
    beforeChangeRender: Handsontable.GridSettings['beforeChangeRender'];
    beforeColumnCollapse: Handsontable.GridSettings['beforeColumnCollapse'];
    beforeColumnExpand: Handsontable.GridSettings['beforeColumnExpand'];
    beforeColumnFreeze: Handsontable.GridSettings['beforeColumnFreeze'];
    beforeColumnMove: Handsontable.GridSettings['beforeColumnMove'];
    beforeColumnResize: Handsontable.GridSettings['beforeColumnResize'];
    beforeColumnSort: Handsontable.GridSettings['beforeColumnSort'];
    beforeColumnWrap: Handsontable.GridSettings['beforeColumnWrap'];
    beforeColumnUnfreeze: Handsontable.GridSettings['beforeColumnUnfreeze'];
    beforeContextMenuSetItems: Handsontable.GridSettings['beforeContextMenuSetItems'];
    beforeContextMenuShow: Handsontable.GridSettings['beforeContextMenuShow'];
    beforeCopy: Handsontable.GridSettings['beforeCopy'];
    beforeCreateCol: Handsontable.GridSettings['beforeCreateCol'];
    beforeCreateRow: Handsontable.GridSettings['beforeCreateRow'];
    beforeCut: Handsontable.GridSettings['beforeCut'];
    beforeDetachChild: Handsontable.GridSettings['beforeDetachChild'];
    beforeDrawBorders: Handsontable.GridSettings['beforeDrawBorders'];
    beforeDropdownMenuSetItems: Handsontable.GridSettings['beforeDropdownMenuSetItems'];
    beforeDropdownMenuShow: Handsontable.GridSettings['beforeDropdownMenuShow'];
    beforeFilter: Handsontable.GridSettings['beforeFilter'];
    beforeGetCellMeta: Handsontable.GridSettings['beforeGetCellMeta'];
    beforeHideColumns: Handsontable.GridSettings['beforeHideColumns'];
    beforeHideRows: Handsontable.GridSettings['beforeHideRows'];
    beforeHighlightingColumnHeader: Handsontable.GridSettings['beforeHighlightingColumnHeader'];
    beforeHighlightingRowHeader: Handsontable.GridSettings['beforeHighlightingRowHeader'];
    beforeInit: Handsontable.GridSettings['beforeInit'];
    beforeInitWalkontable: Handsontable.GridSettings['beforeInitWalkontable'];
    beforeKeyDown: Handsontable.GridSettings['beforeKeyDown'];
    beforeLanguageChange: Handsontable.GridSettings['beforeLanguageChange'];
    beforeLoadData: Handsontable.GridSettings['beforeLoadData'];
    beforeMergeCells: Handsontable.GridSettings['beforeMergeCells'];
    beforeOnCellContextMenu: Handsontable.GridSettings['beforeOnCellContextMenu'];
    beforeOnCellMouseDown: Handsontable.GridSettings['beforeOnCellMouseDown'];
    beforeOnCellMouseOut: Handsontable.GridSettings['beforeOnCellMouseOut'];
    beforeOnCellMouseOver: Handsontable.GridSettings['beforeOnCellMouseOver'];
    beforeOnCellMouseUp: Handsontable.GridSettings['beforeOnCellMouseUp'];
    beforePaste: Handsontable.GridSettings['beforePaste'];
    beforeRedo: Handsontable.GridSettings['beforeRedo'];
    beforeRedoStackChange: Handsontable.GridSettings['beforeRedoStackChange'];
    beforeRefreshDimensions: Handsontable.GridSettings['beforeRefreshDimensions'];
    beforeRemoveCellClassNames: Handsontable.GridSettings['beforeRemoveCellClassNames'];
    beforeRemoveCellMeta: Handsontable.GridSettings['beforeRemoveCellMeta'];
    beforeRemoveCol: Handsontable.GridSettings['beforeRemoveCol'];
    beforeRemoveRow: Handsontable.GridSettings['beforeRemoveRow'];
    beforeRender: Handsontable.GridSettings['beforeRender'];
    beforeRenderer: Handsontable.GridSettings['beforeRenderer'];
    beforeRowMove: Handsontable.GridSettings['beforeRowMove'];
    beforeRowResize: Handsontable.GridSettings['beforeRowResize'];
    beforeRowWrap: Handsontable.GridSettings['beforeRowWrap'];
    beforeSelectColumns: Handsontable.GridSettings['beforeSelectColumns'];
    beforeSelectionFocusSet: Handsontable.GridSettings['beforeSelectionFocusSet'];
    beforeSelectionHighlightSet: Handsontable.GridSettings['beforeSelectionHighlightSet'];
    beforeSelectRows: Handsontable.GridSettings['beforeSelectRows'];
    beforeSetCellMeta: Handsontable.GridSettings['beforeSetCellMeta'];
    beforeSetRangeEnd: Handsontable.GridSettings['beforeSetRangeEnd'];
    beforeSetRangeStart: Handsontable.GridSettings['beforeSetRangeStart'];
    beforeSetRangeStartOnly: Handsontable.GridSettings['beforeSetRangeStartOnly'];
    beforeStretchingColumnWidth: Handsontable.GridSettings['beforeStretchingColumnWidth'];
    beforeTouchScroll: Handsontable.GridSettings['beforeTouchScroll'];
    beforeTrimRow: Handsontable.GridSettings['beforeTrimRow'];
    beforeUndo: Handsontable.GridSettings['beforeUndo'];
    beforeUndoStackChange: Handsontable.GridSettings['beforeUndoStackChange'];
    beforeUnhideColumns: Handsontable.GridSettings['beforeUnhideColumns'];
    beforeUnhideRows: Handsontable.GridSettings['beforeUnhideRows'];
    beforeUnmergeCells: Handsontable.GridSettings['beforeUnmergeCells'];
    beforeUntrimRow: Handsontable.GridSettings['beforeUntrimRow'];
    beforeUpdateData: Handsontable.GridSettings['beforeUpdateData'];
    beforeValidate: Handsontable.GridSettings['beforeValidate'];
    beforeValueRender: Handsontable.GridSettings['beforeValueRender'];
    beforeViewportScroll: Handsontable.GridSettings['beforeViewportScroll'];
    beforeViewportScrollHorizontally: Handsontable.GridSettings['beforeViewportScrollHorizontally'];
    beforeViewportScrollVertically: Handsontable.GridSettings['beforeViewportScrollVertically'];
    beforeViewRender: Handsontable.GridSettings['beforeViewRender'];
    construct: Handsontable.GridSettings['construct'];
    init: Handsontable.GridSettings['init'];
    modifyAutoColumnSizeSeed: Handsontable.GridSettings['modifyAutoColumnSizeSeed'];
    modifyAutofillRange: Handsontable.GridSettings['modifyAutofillRange'];
    modifyColHeader: Handsontable.GridSettings['modifyColHeader'];
    modifyColumnHeaderHeight: Handsontable.GridSettings['modifyColumnHeaderHeight'];
    modifyColumnHeaderValue: Handsontable.GridSettings['modifyColumnHeaderValue'];
    modifyColWidth: Handsontable.GridSettings['modifyColWidth'];
    modifyCopyableRange: Handsontable.GridSettings['modifyCopyableRange'];
    modifyFiltersMultiSelectValue: Handsontable.GridSettings['modifyFiltersMultiSelectValue'];
    modifyFocusedElement: Handsontable.GridSettings['modifyFocusedElement'];
    modifyData: Handsontable.GridSettings['modifyData'];
    modifyFocusOnTabNavigation: Handsontable.GridSettings['modifyFocusOnTabNavigation'];
    modifyGetCellCoords: Handsontable.GridSettings['modifyGetCellCoords'];
    modifyRowData: Handsontable.GridSettings['modifyRowData'];
    modifyRowHeader: Handsontable.GridSettings['modifyRowHeader'];
    modifyRowHeaderWidth: Handsontable.GridSettings['modifyRowHeaderWidth'];
    modifyRowHeight: Handsontable.GridSettings['modifyRowHeight'];
    modifyRowHeightByOverlayName: Handsontable.GridSettings['modifyRowHeightByOverlayName'];
    modifySourceData: Handsontable.GridSettings['modifySourceData'];
    modifyTransformEnd: Handsontable.GridSettings['modifyTransformEnd'];
    modifyTransformFocus: Handsontable.GridSettings['modifyTransformFocus'];
    modifyTransformStart: Handsontable.GridSettings['modifyTransformStart'];
    persistentStateLoad: Handsontable.GridSettings['persistentStateLoad'];
    persistentStateReset: Handsontable.GridSettings['persistentStateReset'];
    persistentStateSave: Handsontable.GridSettings['persistentStateSave'];
    constructor(_hotTableRegisterer: HotTableRegisterer, _hotSettingsResolver: HotSettingsResolver, ngZone: NgZone);
    private get hotInstance();
    private set hotInstance(value);
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    updateHotTable(newSettings: Handsontable.GridSettings): void;
    onAfterColumnsChange(): void;
    onAfterColumnsNumberChange(): void;
    addColumn(column: HotColumnComponent): void;
    removeColumn(column: HotColumnComponent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<HotTableComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<HotTableComponent, "hot-table", never, { "settings": { "alias": "settings"; "required": false; }; "hotId": { "alias": "hotId"; "required": false; }; "activeHeaderClassName": { "alias": "activeHeaderClassName"; "required": false; }; "allowEmpty": { "alias": "allowEmpty"; "required": false; }; "allowHtml": { "alias": "allowHtml"; "required": false; }; "allowInsertColumn": { "alias": "allowInsertColumn"; "required": false; }; "allowInsertRow": { "alias": "allowInsertRow"; "required": false; }; "allowInvalid": { "alias": "allowInvalid"; "required": false; }; "allowRemoveColumn": { "alias": "allowRemoveColumn"; "required": false; }; "allowRemoveRow": { "alias": "allowRemoveRow"; "required": false; }; "ariaTags": { "alias": "ariaTags"; "required": false; }; "autoColumnSize": { "alias": "autoColumnSize"; "required": false; }; "autoRowSize": { "alias": "autoRowSize"; "required": false; }; "autoWrapCol": { "alias": "autoWrapCol"; "required": false; }; "autoWrapRow": { "alias": "autoWrapRow"; "required": false; }; "bindRowsWithHeaders": { "alias": "bindRowsWithHeaders"; "required": false; }; "cell": { "alias": "cell"; "required": false; }; "cells": { "alias": "cells"; "required": false; }; "checkedTemplate": { "alias": "checkedTemplate"; "required": false; }; "className": { "alias": "className"; "required": false; }; "colHeaders": { "alias": "colHeaders"; "required": false; }; "collapsibleColumns": { "alias": "collapsibleColumns"; "required": false; }; "columnHeaderHeight": { "alias": "columnHeaderHeight"; "required": false; }; "columns": { "alias": "columns"; "required": false; }; "columnSorting": { "alias": "columnSorting"; "required": false; }; "columnSummary": { "alias": "columnSummary"; "required": false; }; "colWidths": { "alias": "colWidths"; "required": false; }; "commentedCellClassName": { "alias": "commentedCellClassName"; "required": false; }; "comments": { "alias": "comments"; "required": false; }; "contextMenu": { "alias": "contextMenu"; "required": false; }; "copyable": { "alias": "copyable"; "required": false; }; "copyPaste": { "alias": "copyPaste"; "required": false; }; "correctFormat": { "alias": "correctFormat"; "required": false; }; "currentColClassName": { "alias": "currentColClassName"; "required": false; }; "currentHeaderClassName": { "alias": "currentHeaderClassName"; "required": false; }; "currentRowClassName": { "alias": "currentRowClassName"; "required": false; }; "customBorders": { "alias": "customBorders"; "required": false; }; "data": { "alias": "data"; "required": false; }; "dataDotNotation": { "alias": "dataDotNotation"; "required": false; }; "dataSchema": { "alias": "dataSchema"; "required": false; }; "dateFormat": { "alias": "dateFormat"; "required": false; }; "datePickerConfig": { "alias": "datePickerConfig"; "required": false; }; "defaultDate": { "alias": "defaultDate"; "required": false; }; "tabNavigation": { "alias": "tabNavigation"; "required": false; }; "disableVisualSelection": { "alias": "disableVisualSelection"; "required": false; }; "dragToScroll": { "alias": "dragToScroll"; "required": false; }; "dropdownMenu": { "alias": "dropdownMenu"; "required": false; }; "editor": { "alias": "editor"; "required": false; }; "enterBeginsEditing": { "alias": "enterBeginsEditing"; "required": false; }; "enterMoves": { "alias": "enterMoves"; "required": false; }; "fillHandle": { "alias": "fillHandle"; "required": false; }; "filter": { "alias": "filter"; "required": false; }; "filteringCaseSensitive": { "alias": "filteringCaseSensitive"; "required": false; }; "filters": { "alias": "filters"; "required": false; }; "fixedColumnsLeft": { "alias": "fixedColumnsLeft"; "required": false; }; "fixedColumnsStart": { "alias": "fixedColumnsStart"; "required": false; }; "fixedRowsBottom": { "alias": "fixedRowsBottom"; "required": false; }; "fixedRowsTop": { "alias": "fixedRowsTop"; "required": false; }; "formulas": { "alias": "formulas"; "required": false; }; "fragmentSelection": { "alias": "fragmentSelection"; "required": false; }; "headerClassName": { "alias": "headerClassName"; "required": false; }; "height": { "alias": "height"; "required": false; }; "hiddenColumns": { "alias": "hiddenColumns"; "required": false; }; "hiddenRows": { "alias": "hiddenRows"; "required": false; }; "invalidCellClassName": { "alias": "invalidCellClassName"; "required": false; }; "imeFastEdit": { "alias": "imeFastEdit"; "required": false; }; "label": { "alias": "label"; "required": false; }; "language": { "alias": "language"; "required": false; }; "layoutDirection": { "alias": "layoutDirection"; "required": false; }; "licenseKey": { "alias": "licenseKey"; "required": false; }; "locale": { "alias": "locale"; "required": false; }; "manualColumnFreeze": { "alias": "manualColumnFreeze"; "required": false; }; "manualColumnMove": { "alias": "manualColumnMove"; "required": false; }; "manualColumnResize": { "alias": "manualColumnResize"; "required": false; }; "manualRowMove": { "alias": "manualRowMove"; "required": false; }; "manualRowResize": { "alias": "manualRowResize"; "required": false; }; "maxCols": { "alias": "maxCols"; "required": false; }; "maxRows": { "alias": "maxRows"; "required": false; }; "mergeCells": { "alias": "mergeCells"; "required": false; }; "minCols": { "alias": "minCols"; "required": false; }; "minRows": { "alias": "minRows"; "required": false; }; "minSpareCols": { "alias": "minSpareCols"; "required": false; }; "minSpareRows": { "alias": "minSpareRows"; "required": false; }; "multiColumnSorting": { "alias": "multiColumnSorting"; "required": false; }; "navigableHeaders": { "alias": "navigableHeaders"; "required": false; }; "nestedHeaders": { "alias": "nestedHeaders"; "required": false; }; "nestedRows": { "alias": "nestedRows"; "required": false; }; "noWordWrapClassName": { "alias": "noWordWrapClassName"; "required": false; }; "numericFormat": { "alias": "numericFormat"; "required": false; }; "observeDOMVisibility": { "alias": "observeDOMVisibility"; "required": false; }; "outsideClickDeselects": { "alias": "outsideClickDeselects"; "required": false; }; "persistentState": { "alias": "persistentState"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "placeholderCellClassName": { "alias": "placeholderCellClassName"; "required": false; }; "preventOverflow": { "alias": "preventOverflow"; "required": false; }; "preventWheel": { "alias": "preventWheel"; "required": false; }; "readOnly": { "alias": "readOnly"; "required": false; }; "readOnlyCellClassName": { "alias": "readOnlyCellClassName"; "required": false; }; "renderAllColumns": { "alias": "renderAllColumns"; "required": false; }; "renderAllRows": { "alias": "renderAllRows"; "required": false; }; "renderer": { "alias": "renderer"; "required": false; }; "rowHeaders": { "alias": "rowHeaders"; "required": false; }; "rowHeaderWidth": { "alias": "rowHeaderWidth"; "required": false; }; "rowHeights": { "alias": "rowHeights"; "required": false; }; "search": { "alias": "search"; "required": false; }; "selectionMode": { "alias": "selectionMode"; "required": false; }; "selectOptions": { "alias": "selectOptions"; "required": false; }; "skipColumnOnPaste": { "alias": "skipColumnOnPaste"; "required": false; }; "skipRowOnPaste": { "alias": "skipRowOnPaste"; "required": false; }; "sortByRelevance": { "alias": "sortByRelevance"; "required": false; }; "source": { "alias": "source"; "required": false; }; "startCols": { "alias": "startCols"; "required": false; }; "startRows": { "alias": "startRows"; "required": false; }; "stretchH": { "alias": "stretchH"; "required": false; }; "strict": { "alias": "strict"; "required": false; }; "tableClassName": { "alias": "tableClassName"; "required": false; }; "tabMoves": { "alias": "tabMoves"; "required": false; }; "title": { "alias": "title"; "required": false; }; "trimDropdown": { "alias": "trimDropdown"; "required": false; }; "trimRows": { "alias": "trimRows"; "required": false; }; "trimWhitespace": { "alias": "trimWhitespace"; "required": false; }; "type": { "alias": "type"; "required": false; }; "uncheckedTemplate": { "alias": "uncheckedTemplate"; "required": false; }; "undo": { "alias": "undo"; "required": false; }; "validator": { "alias": "validator"; "required": false; }; "viewportColumnRenderingOffset": { "alias": "viewportColumnRenderingOffset"; "required": false; }; "viewportRowRenderingOffset": { "alias": "viewportRowRenderingOffset"; "required": false; }; "visibleRows": { "alias": "visibleRows"; "required": false; }; "width": { "alias": "width"; "required": false; }; "wordWrap": { "alias": "wordWrap"; "required": false; }; "afterAddChild": { "alias": "afterAddChild"; "required": false; }; "afterAutofill": { "alias": "afterAutofill"; "required": false; }; "afterBeginEditing": { "alias": "afterBeginEditing"; "required": false; }; "afterCellMetaReset": { "alias": "afterCellMetaReset"; "required": false; }; "afterChange": { "alias": "afterChange"; "required": false; }; "afterChangesObserved": { "alias": "afterChangesObserved"; "required": false; }; "afterColumnCollapse": { "alias": "afterColumnCollapse"; "required": false; }; "afterColumnExpand": { "alias": "afterColumnExpand"; "required": false; }; "afterColumnFreeze": { "alias": "afterColumnFreeze"; "required": false; }; "afterColumnMove": { "alias": "afterColumnMove"; "required": false; }; "afterColumnResize": { "alias": "afterColumnResize"; "required": false; }; "afterColumnSequenceChange": { "alias": "afterColumnSequenceChange"; "required": false; }; "afterColumnSort": { "alias": "afterColumnSort"; "required": false; }; "afterColumnUnfreeze": { "alias": "afterColumnUnfreeze"; "required": false; }; "afterContextMenuDefaultOptions": { "alias": "afterContextMenuDefaultOptions"; "required": false; }; "afterContextMenuHide": { "alias": "afterContextMenuHide"; "required": false; }; "afterContextMenuShow": { "alias": "afterContextMenuShow"; "required": false; }; "afterCopy": { "alias": "afterCopy"; "required": false; }; "afterCopyLimit": { "alias": "afterCopyLimit"; "required": false; }; "afterCreateCol": { "alias": "afterCreateCol"; "required": false; }; "afterCreateRow": { "alias": "afterCreateRow"; "required": false; }; "afterCut": { "alias": "afterCut"; "required": false; }; "afterDeselect": { "alias": "afterDeselect"; "required": false; }; "afterDestroy": { "alias": "afterDestroy"; "required": false; }; "afterDetachChild": { "alias": "afterDetachChild"; "required": false; }; "afterDocumentKeyDown": { "alias": "afterDocumentKeyDown"; "required": false; }; "afterDrawSelection": { "alias": "afterDrawSelection"; "required": false; }; "afterDropdownMenuDefaultOptions": { "alias": "afterDropdownMenuDefaultOptions"; "required": false; }; "afterDropdownMenuHide": { "alias": "afterDropdownMenuHide"; "required": false; }; "afterDropdownMenuShow": { "alias": "afterDropdownMenuShow"; "required": false; }; "afterFilter": { "alias": "afterFilter"; "required": false; }; "afterFormulasValuesUpdate": { "alias": "afterFormulasValuesUpdate"; "required": false; }; "afterGetCellMeta": { "alias": "afterGetCellMeta"; "required": false; }; "afterGetColHeader": { "alias": "afterGetColHeader"; "required": false; }; "afterGetColumnHeaderRenderers": { "alias": "afterGetColumnHeaderRenderers"; "required": false; }; "afterGetRowHeader": { "alias": "afterGetRowHeader"; "required": false; }; "afterGetRowHeaderRenderers": { "alias": "afterGetRowHeaderRenderers"; "required": false; }; "afterHideColumns": { "alias": "afterHideColumns"; "required": false; }; "afterHideRows": { "alias": "afterHideRows"; "required": false; }; "afterInit": { "alias": "afterInit"; "required": false; }; "afterLanguageChange": { "alias": "afterLanguageChange"; "required": false; }; "afterListen": { "alias": "afterListen"; "required": false; }; "afterLoadData": { "alias": "afterLoadData"; "required": false; }; "afterMergeCells": { "alias": "afterMergeCells"; "required": false; }; "afterModifyTransformEnd": { "alias": "afterModifyTransformEnd"; "required": false; }; "afterModifyTransformFocus": { "alias": "afterModifyTransformFocus"; "required": false; }; "afterModifyTransformStart": { "alias": "afterModifyTransformStart"; "required": false; }; "afterMomentumScroll": { "alias": "afterMomentumScroll"; "required": false; }; "afterNamedExpressionAdded": { "alias": "afterNamedExpressionAdded"; "required": false; }; "afterNamedExpressionRemoved": { "alias": "afterNamedExpressionRemoved"; "required": false; }; "afterOnCellContextMenu": { "alias": "afterOnCellContextMenu"; "required": false; }; "afterOnCellCornerDblClick": { "alias": "afterOnCellCornerDblClick"; "required": false; }; "afterOnCellCornerMouseDown": { "alias": "afterOnCellCornerMouseDown"; "required": false; }; "afterOnCellMouseDown": { "alias": "afterOnCellMouseDown"; "required": false; }; "afterOnCellMouseOut": { "alias": "afterOnCellMouseOut"; "required": false; }; "afterOnCellMouseOver": { "alias": "afterOnCellMouseOver"; "required": false; }; "afterOnCellMouseUp": { "alias": "afterOnCellMouseUp"; "required": false; }; "afterPaste": { "alias": "afterPaste"; "required": false; }; "afterPluginsInitialized": { "alias": "afterPluginsInitialized"; "required": false; }; "afterRedo": { "alias": "afterRedo"; "required": false; }; "afterRedoStackChange": { "alias": "afterRedoStackChange"; "required": false; }; "afterRefreshDimensions": { "alias": "afterRefreshDimensions"; "required": false; }; "afterRemoveCellMeta": { "alias": "afterRemoveCellMeta"; "required": false; }; "afterRemoveCol": { "alias": "afterRemoveCol"; "required": false; }; "afterRemoveRow": { "alias": "afterRemoveRow"; "required": false; }; "afterRender": { "alias": "afterRender"; "required": false; }; "afterRenderer": { "alias": "afterRenderer"; "required": false; }; "afterRowMove": { "alias": "afterRowMove"; "required": false; }; "afterRowResize": { "alias": "afterRowResize"; "required": false; }; "afterRowSequenceChange": { "alias": "afterRowSequenceChange"; "required": false; }; "afterScrollHorizontally": { "alias": "afterScrollHorizontally"; "required": false; }; "afterScrollVertically": { "alias": "afterScrollVertically"; "required": false; }; "afterScroll": { "alias": "afterScroll"; "required": false; }; "afterSelectColumns": { "alias": "afterSelectColumns"; "required": false; }; "afterSelection": { "alias": "afterSelection"; "required": false; }; "afterSelectionByProp": { "alias": "afterSelectionByProp"; "required": false; }; "afterSelectionEnd": { "alias": "afterSelectionEnd"; "required": false; }; "afterSelectionEndByProp": { "alias": "afterSelectionEndByProp"; "required": false; }; "afterSelectionFocusSet": { "alias": "afterSelectionFocusSet"; "required": false; }; "afterSelectRows": { "alias": "afterSelectRows"; "required": false; }; "afterSetCellMeta": { "alias": "afterSetCellMeta"; "required": false; }; "afterSetDataAtCell": { "alias": "afterSetDataAtCell"; "required": false; }; "afterSetDataAtRowProp": { "alias": "afterSetDataAtRowProp"; "required": false; }; "afterSetSourceDataAtCell": { "alias": "afterSetSourceDataAtCell"; "required": false; }; "afterSheetAdded": { "alias": "afterSheetAdded"; "required": false; }; "afterSheetRenamed": { "alias": "afterSheetRenamed"; "required": false; }; "afterSheetRemoved": { "alias": "afterSheetRemoved"; "required": false; }; "afterTrimRow": { "alias": "afterTrimRow"; "required": false; }; "afterUndo": { "alias": "afterUndo"; "required": false; }; "afterUndoStackChange": { "alias": "afterUndoStackChange"; "required": false; }; "afterUnhideColumns": { "alias": "afterUnhideColumns"; "required": false; }; "afterUnhideRows": { "alias": "afterUnhideRows"; "required": false; }; "afterUnlisten": { "alias": "afterUnlisten"; "required": false; }; "afterUnmergeCells": { "alias": "afterUnmergeCells"; "required": false; }; "afterUntrimRow": { "alias": "afterUntrimRow"; "required": false; }; "afterUpdateData": { "alias": "afterUpdateData"; "required": false; }; "afterUpdateSettings": { "alias": "afterUpdateSettings"; "required": false; }; "afterValidate": { "alias": "afterValidate"; "required": false; }; "afterViewportColumnCalculatorOverride": { "alias": "afterViewportColumnCalculatorOverride"; "required": false; }; "afterViewportRowCalculatorOverride": { "alias": "afterViewportRowCalculatorOverride"; "required": false; }; "afterViewRender": { "alias": "afterViewRender"; "required": false; }; "beforeAddChild": { "alias": "beforeAddChild"; "required": false; }; "beforeAutofill": { "alias": "beforeAutofill"; "required": false; }; "beforeBeginEditing": { "alias": "beforeBeginEditing"; "required": false; }; "beforeCellAlignment": { "alias": "beforeCellAlignment"; "required": false; }; "beforeChange": { "alias": "beforeChange"; "required": false; }; "beforeChangeRender": { "alias": "beforeChangeRender"; "required": false; }; "beforeColumnCollapse": { "alias": "beforeColumnCollapse"; "required": false; }; "beforeColumnExpand": { "alias": "beforeColumnExpand"; "required": false; }; "beforeColumnFreeze": { "alias": "beforeColumnFreeze"; "required": false; }; "beforeColumnMove": { "alias": "beforeColumnMove"; "required": false; }; "beforeColumnResize": { "alias": "beforeColumnResize"; "required": false; }; "beforeColumnSort": { "alias": "beforeColumnSort"; "required": false; }; "beforeColumnWrap": { "alias": "beforeColumnWrap"; "required": false; }; "beforeColumnUnfreeze": { "alias": "beforeColumnUnfreeze"; "required": false; }; "beforeContextMenuSetItems": { "alias": "beforeContextMenuSetItems"; "required": false; }; "beforeContextMenuShow": { "alias": "beforeContextMenuShow"; "required": false; }; "beforeCopy": { "alias": "beforeCopy"; "required": false; }; "beforeCreateCol": { "alias": "beforeCreateCol"; "required": false; }; "beforeCreateRow": { "alias": "beforeCreateRow"; "required": false; }; "beforeCut": { "alias": "beforeCut"; "required": false; }; "beforeDetachChild": { "alias": "beforeDetachChild"; "required": false; }; "beforeDrawBorders": { "alias": "beforeDrawBorders"; "required": false; }; "beforeDropdownMenuSetItems": { "alias": "beforeDropdownMenuSetItems"; "required": false; }; "beforeDropdownMenuShow": { "alias": "beforeDropdownMenuShow"; "required": false; }; "beforeFilter": { "alias": "beforeFilter"; "required": false; }; "beforeGetCellMeta": { "alias": "beforeGetCellMeta"; "required": false; }; "beforeHideColumns": { "alias": "beforeHideColumns"; "required": false; }; "beforeHideRows": { "alias": "beforeHideRows"; "required": false; }; "beforeHighlightingColumnHeader": { "alias": "beforeHighlightingColumnHeader"; "required": false; }; "beforeHighlightingRowHeader": { "alias": "beforeHighlightingRowHeader"; "required": false; }; "beforeInit": { "alias": "beforeInit"; "required": false; }; "beforeInitWalkontable": { "alias": "beforeInitWalkontable"; "required": false; }; "beforeKeyDown": { "alias": "beforeKeyDown"; "required": false; }; "beforeLanguageChange": { "alias": "beforeLanguageChange"; "required": false; }; "beforeLoadData": { "alias": "beforeLoadData"; "required": false; }; "beforeMergeCells": { "alias": "beforeMergeCells"; "required": false; }; "beforeOnCellContextMenu": { "alias": "beforeOnCellContextMenu"; "required": false; }; "beforeOnCellMouseDown": { "alias": "beforeOnCellMouseDown"; "required": false; }; "beforeOnCellMouseOut": { "alias": "beforeOnCellMouseOut"; "required": false; }; "beforeOnCellMouseOver": { "alias": "beforeOnCellMouseOver"; "required": false; }; "beforeOnCellMouseUp": { "alias": "beforeOnCellMouseUp"; "required": false; }; "beforePaste": { "alias": "beforePaste"; "required": false; }; "beforeRedo": { "alias": "beforeRedo"; "required": false; }; "beforeRedoStackChange": { "alias": "beforeRedoStackChange"; "required": false; }; "beforeRefreshDimensions": { "alias": "beforeRefreshDimensions"; "required": false; }; "beforeRemoveCellClassNames": { "alias": "beforeRemoveCellClassNames"; "required": false; }; "beforeRemoveCellMeta": { "alias": "beforeRemoveCellMeta"; "required": false; }; "beforeRemoveCol": { "alias": "beforeRemoveCol"; "required": false; }; "beforeRemoveRow": { "alias": "beforeRemoveRow"; "required": false; }; "beforeRender": { "alias": "beforeRender"; "required": false; }; "beforeRenderer": { "alias": "beforeRenderer"; "required": false; }; "beforeRowMove": { "alias": "beforeRowMove"; "required": false; }; "beforeRowResize": { "alias": "beforeRowResize"; "required": false; }; "beforeRowWrap": { "alias": "beforeRowWrap"; "required": false; }; "beforeSelectColumns": { "alias": "beforeSelectColumns"; "required": false; }; "beforeSelectionFocusSet": { "alias": "beforeSelectionFocusSet"; "required": false; }; "beforeSelectionHighlightSet": { "alias": "beforeSelectionHighlightSet"; "required": false; }; "beforeSelectRows": { "alias": "beforeSelectRows"; "required": false; }; "beforeSetCellMeta": { "alias": "beforeSetCellMeta"; "required": false; }; "beforeSetRangeEnd": { "alias": "beforeSetRangeEnd"; "required": false; }; "beforeSetRangeStart": { "alias": "beforeSetRangeStart"; "required": false; }; "beforeSetRangeStartOnly": { "alias": "beforeSetRangeStartOnly"; "required": false; }; "beforeStretchingColumnWidth": { "alias": "beforeStretchingColumnWidth"; "required": false; }; "beforeTouchScroll": { "alias": "beforeTouchScroll"; "required": false; }; "beforeTrimRow": { "alias": "beforeTrimRow"; "required": false; }; "beforeUndo": { "alias": "beforeUndo"; "required": false; }; "beforeUndoStackChange": { "alias": "beforeUndoStackChange"; "required": false; }; "beforeUnhideColumns": { "alias": "beforeUnhideColumns"; "required": false; }; "beforeUnhideRows": { "alias": "beforeUnhideRows"; "required": false; }; "beforeUnmergeCells": { "alias": "beforeUnmergeCells"; "required": false; }; "beforeUntrimRow": { "alias": "beforeUntrimRow"; "required": false; }; "beforeUpdateData": { "alias": "beforeUpdateData"; "required": false; }; "beforeValidate": { "alias": "beforeValidate"; "required": false; }; "beforeValueRender": { "alias": "beforeValueRender"; "required": false; }; "beforeViewportScroll": { "alias": "beforeViewportScroll"; "required": false; }; "beforeViewportScrollHorizontally": { "alias": "beforeViewportScrollHorizontally"; "required": false; }; "beforeViewportScrollVertically": { "alias": "beforeViewportScrollVertically"; "required": false; }; "beforeViewRender": { "alias": "beforeViewRender"; "required": false; }; "construct": { "alias": "construct"; "required": false; }; "init": { "alias": "init"; "required": false; }; "modifyAutoColumnSizeSeed": { "alias": "modifyAutoColumnSizeSeed"; "required": false; }; "modifyAutofillRange": { "alias": "modifyAutofillRange"; "required": false; }; "modifyColHeader": { "alias": "modifyColHeader"; "required": false; }; "modifyColumnHeaderHeight": { "alias": "modifyColumnHeaderHeight"; "required": false; }; "modifyColumnHeaderValue": { "alias": "modifyColumnHeaderValue"; "required": false; }; "modifyColWidth": { "alias": "modifyColWidth"; "required": false; }; "modifyCopyableRange": { "alias": "modifyCopyableRange"; "required": false; }; "modifyFiltersMultiSelectValue": { "alias": "modifyFiltersMultiSelectValue"; "required": false; }; "modifyFocusedElement": { "alias": "modifyFocusedElement"; "required": false; }; "modifyData": { "alias": "modifyData"; "required": false; }; "modifyFocusOnTabNavigation": { "alias": "modifyFocusOnTabNavigation"; "required": false; }; "modifyGetCellCoords": { "alias": "modifyGetCellCoords"; "required": false; }; "modifyRowData": { "alias": "modifyRowData"; "required": false; }; "modifyRowHeader": { "alias": "modifyRowHeader"; "required": false; }; "modifyRowHeaderWidth": { "alias": "modifyRowHeaderWidth"; "required": false; }; "modifyRowHeight": { "alias": "modifyRowHeight"; "required": false; }; "modifyRowHeightByOverlayName": { "alias": "modifyRowHeightByOverlayName"; "required": false; }; "modifySourceData": { "alias": "modifySourceData"; "required": false; }; "modifyTransformEnd": { "alias": "modifyTransformEnd"; "required": false; }; "modifyTransformFocus": { "alias": "modifyTransformFocus"; "required": false; }; "modifyTransformStart": { "alias": "modifyTransformStart"; "required": false; }; "persistentStateLoad": { "alias": "persistentStateLoad"; "required": false; }; "persistentStateReset": { "alias": "persistentStateReset"; "required": false; }; "persistentStateSave": { "alias": "persistentStateSave"; "required": false; }; }, {}, never, never, false, never>;
}
