import { OnInit, OnChanges, OnDestroy } from '@angular/core';
import { HotTableComponent } from './hot-table.component';
import Handsontable from 'handsontable/base';
import * as i0 from "@angular/core";
export declare class HotColumnComponent implements OnInit, OnChanges, OnDestroy {
    private parentComponent;
    private firstRun;
    allowEmpty: Handsontable.ColumnSettings['allowEmpty'];
    allowHtml: Handsontable.ColumnSettings['allowHtml'];
    allowInvalid: Handsontable.ColumnSettings['allowInvalid'];
    checkedTemplate: Handsontable.ColumnSettings['checkedTemplate'];
    className: Handsontable.ColumnSettings['className'];
    columnSorting: Handsontable.ColumnSettings['columnSorting'];
    colWidths: Handsontable.ColumnSettings['colWidths'];
    commentedCellClassName: Handsontable.ColumnSettings['commentedCellClassName'];
    copyable: Handsontable.ColumnSettings['copyable'];
    correctFormat: Handsontable.ColumnSettings['correctFormat'];
    data: Handsontable.ColumnSettings['data'];
    dateFormat: Handsontable.ColumnSettings['dateFormat'];
    defaultDate: Handsontable.ColumnSettings['defaultDate'];
    editor: Handsontable.ColumnSettings['editor'];
    filteringCaseSensitive: Handsontable.ColumnSettings['filteringCaseSensitive'];
    headerClassName: Handsontable.GridSettings['headerClassName'];
    invalidCellClassName: Handsontable.ColumnSettings['invalidCellClassName'];
    label: Handsontable.ColumnSettings['label'];
    language: Handsontable.ColumnSettings['language'];
    noWordWrapClassName: Handsontable.ColumnSettings['noWordWrapClassName'];
    numericFormat: Handsontable.ColumnSettings['numericFormat'];
    placeholder: Handsontable.ColumnSettings['placeholder'];
    placeholderCellClassName: Handsontable.ColumnSettings['placeholderCellClassName'];
    readOnly: Handsontable.ColumnSettings['readOnly'];
    readOnlyCellClassName: Handsontable.ColumnSettings['readOnlyCellClassName'];
    renderer: Handsontable.ColumnSettings['renderer'];
    selectOptions: Handsontable.ColumnSettings['selectOptions'];
    skipColumnOnPaste: Handsontable.ColumnSettings['skipColumnOnPaste'];
    sortByRelevance: Handsontable.ColumnSettings['sortByRelevance'];
    source: Handsontable.ColumnSettings['source'];
    strict: Handsontable.ColumnSettings['strict'];
    title: Handsontable.ColumnSettings['title'];
    trimDropdown: Handsontable.ColumnSettings['trimDropdown'];
    type: Handsontable.ColumnSettings['type'];
    uncheckedTemplate: Handsontable.ColumnSettings['uncheckedTemplate'];
    validator: Handsontable.ColumnSettings['validator'];
    visibleRows: Handsontable.ColumnSettings['visibleRows'];
    width: Handsontable.ColumnSettings['width'];
    wordWrap: Handsontable.ColumnSettings['wordWrap'];
    constructor(parentComponent: HotTableComponent);
    ngOnInit(): void;
    ngOnChanges(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<HotColumnComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<HotColumnComponent, "hot-column", never, { "allowEmpty": { "alias": "allowEmpty"; "required": false; }; "allowHtml": { "alias": "allowHtml"; "required": false; }; "allowInvalid": { "alias": "allowInvalid"; "required": false; }; "checkedTemplate": { "alias": "checkedTemplate"; "required": false; }; "className": { "alias": "className"; "required": false; }; "columnSorting": { "alias": "columnSorting"; "required": false; }; "colWidths": { "alias": "colWidths"; "required": false; }; "commentedCellClassName": { "alias": "commentedCellClassName"; "required": false; }; "copyable": { "alias": "copyable"; "required": false; }; "correctFormat": { "alias": "correctFormat"; "required": false; }; "data": { "alias": "data"; "required": false; }; "dateFormat": { "alias": "dateFormat"; "required": false; }; "defaultDate": { "alias": "defaultDate"; "required": false; }; "editor": { "alias": "editor"; "required": false; }; "filteringCaseSensitive": { "alias": "filteringCaseSensitive"; "required": false; }; "headerClassName": { "alias": "headerClassName"; "required": false; }; "invalidCellClassName": { "alias": "invalidCellClassName"; "required": false; }; "label": { "alias": "label"; "required": false; }; "language": { "alias": "language"; "required": false; }; "noWordWrapClassName": { "alias": "noWordWrapClassName"; "required": false; }; "numericFormat": { "alias": "numericFormat"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "placeholderCellClassName": { "alias": "placeholderCellClassName"; "required": false; }; "readOnly": { "alias": "readOnly"; "required": false; }; "readOnlyCellClassName": { "alias": "readOnlyCellClassName"; "required": false; }; "renderer": { "alias": "renderer"; "required": false; }; "selectOptions": { "alias": "selectOptions"; "required": false; }; "skipColumnOnPaste": { "alias": "skipColumnOnPaste"; "required": false; }; "sortByRelevance": { "alias": "sortByRelevance"; "required": false; }; "source": { "alias": "source"; "required": false; }; "strict": { "alias": "strict"; "required": false; }; "title": { "alias": "title"; "required": false; }; "trimDropdown": { "alias": "trimDropdown"; "required": false; }; "type": { "alias": "type"; "required": false; }; "uncheckedTemplate": { "alias": "uncheckedTemplate"; "required": false; }; "validator": { "alias": "validator"; "required": false; }; "visibleRows": { "alias": "visibleRows"; "required": false; }; "width": { "alias": "width"; "required": false; }; "wordWrap": { "alias": "wordWrap"; "required": false; }; }, {}, never, never, false, never>;
}
