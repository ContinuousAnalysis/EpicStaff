test-manager:
    extends: .docker-login
    stage: test
    tags:
        - docker
    only:
        changes:
            - "src/manager/**/*"
            - "src/tool/**/*"
            # - .gitlab-ci.yml
            # - build.yml
            # - test.yml
            # - integration.yml
            # - push.yml
    except:
        - QA
    variables:
        DOCKER_HOST: "unix:///var/run/docker.sock"
    script:
        - docker pull $TEST_MANAGER_TAG
        - |
            docker run \
              --privileged \
              -v /var/run/docker.sock:/var/run/docker.sock \
              $TEST_MANAGER_TAG /bin/bash -c "\
                cd /home/user/root/app; \
                poetry run pytest ./tests"

test-crewdb:
    extends: .docker-login
    stage: test
    tags:
        - docker
    only:
        changes:
            - "src/crewdb/**/*"
            # - .gitlab-ci.yml
            # - build.yml
            # - test.yml
            # - integration.yml
            # - push.yml
    except:
        - QA
    script:
        - docker pull $TEST_CREWDB_TAG
        - |
            docker run $TEST_CREWDB_TAG /bin/bash -c "\
              echo 'CrewDB health check completed successfully!'; \
              pg_isready -U postgres"

test-django:
    extends: .docker-login
    stage: test
    tags:
        - docker
    only:
        changes:
            - "src/django_app/**/*"
            # - .gitlab-ci.yml
            # - build.yml
            # - test.yml
            # - integration.yml
            # - push.yml
    except:
        - QA
    script:
        - docker pull $TEST_DJANGO_TAG

        - cd integration_tests
        - bash create_env.sh
        - docker compose up crewdb -d
        
        - |
            docker run $TEST_DJANGO_TAG /bin/bash -c "\
              cd /home/user/root/django; \
              poetry run pytest ./tests"

test-crew:
    extends: .docker-login
    stage: test
    tags:
        - docker
    only:
        changes:
            - "src/crew/**/*"
            # - .gitlab-ci.yml
            # - build.yml
            # - test.yml
            # - integration.yml
            # - push.yml
    except:
        - QA
    script:
        - docker pull $TEST_CREW_TAG

        - cd integration_tests
        - bash create_env.sh
        - docker compose up crewdb -d
        
        
        - |
            docker run $TEST_CREW_TAG /bin/bash -c "\
              cd /home/user/root/app; \
              poetry run pytest ./tests"

test-sandbox:
    extends: .docker-login
    stage: test
    tags:
        - docker
    only:
        changes:
            - "src/sandbox/**/*"
            # - .gitlab-ci.yml
            # - build.yml
            # - test.yml
            # - integration.yml
            # - push.yml
    except:
        - QA
    script:
        - docker pull $TEST_SANDBOX_TAG
        - |
            docker run -e RAPIDAPI_KEY=$RAPIDAPI_KEY $TEST_SANDBOX_TAG /bin/bash -c "\
              cd /home/user/root/app; \
              poetry run pytest ./tests"

test-frontend:
    extends: .docker-login
    stage: test
    tags:
        - docker
    rules:
    - when: never

    # only:
    #     changes:
    #         - "frontend/**/*"
    #         - .gitlab-ci.yml
    #         - build.yml
    #         - test.yml
    # except:
    #     - QA

    script:
        - docker pull $TEST_FRONTEND_TAG
        - |
            docker run $TEST_FRONTEND_TAG /bin/sh -c "\
              cd /home/user/root/app; \
             echo 'Frontend tests completed successfully!'"

#  npm test -- --no-watch --browsers=ChromeHeadlessCI"
