.docker-pull-and-tag:
  extends: .docker-login
  before_script:
    - |
      pull_and_tag() {
        NAME=$1
        TEST_TAG_VAR="TEST_${NAME}_TAG"
        REPO_VAR="${NAME}_REPO"
        PULLED_TAG_VAR="${NAME}_PULLED_TAG"

        TEST_TAG="${!TEST_TAG_VAR}"
        REPO="${!REPO_VAR}"

        if docker pull "$TEST_TAG"; then
          eval "$PULLED_TAG_VAR=\"$TEST_TAG\""
        elif docker pull "$REPO:latest-$CI_COMMIT_BRANCH"; then
          eval "$PULLED_TAG_VAR=\"$REPO:latest-$CI_COMMIT_BRANCH\""
        elif docker pull "$REPO:latest"; then
          eval "$PULLED_TAG_VAR=\"$REPO:latest\""
        fi

        eval "export $PULLED_TAG_VAR"
        echo "${PULLED_TAG_VAR} = ${!PULLED_TAG_VAR}"
        docker tag "${!PULLED_TAG_VAR}" "${NAME,,}"
      }

      pull_and_tag CREW
      pull_and_tag MANAGER
      pull_and_tag DJANGO
      pull_and_tag SANDBOX
      pull_and_tag KNOWLEDGE
      pull_and_tag REALTIME
      pull_and_tag CREWDB
      

integration_test:
  stage: integration_test
  extends:
    - .docker-login
    - .docker-pull-and-tag
  tags:
    - docker
  variables:
    MANAGER_PULLED_TAG: ""
    DJANGO_PULLED_TAG: ""
    CREW_PULLED_TAG: ""
    KNOWLEDGE_PULLED_TAG: ""
    SANDBOX_PULLED_TAG: ""
    REALTIME_PULLED_TAG: ""
    CREWDB_PULLED_TAG: ""
  rules:
    - if: '$INTEGRATION_TEST_JOB == "force"'
    - if: '$INTEGRATION_TEST_JOB == "skip"'
      when: never
    - if: '$INTEGRATION_TEST_JOB == "auto"'
      changes:
        - "src/manager/**/*"
        - "src/django_app/**/*"
        - "src/crew/**/*"
        - "src/sandbox/**/*"
        - "src/knowledge/**/*"
        - "integration_tests/**/*"
    - if: '$CI_COMMIT_REF_NAME != "Dev" || $CI_COMMIT_REF_NAME != "main"'
      when: never
    
  script:
    - cd integration_tests
    - curl -sS https://bootstrap.pypa.io/get-pip.py | python3
    - python3 -m pip install --upgrade pip
    - python3 -m pip install -r requirements.txt
    - export PATH=$HOME/.local/bin:$PATH
    - python3 -m pip show pytest
    - docker pull redis:latest
    - docker pull postgres:latest
    - bash create_env.sh
    - docker images
    - docker volume ls
    - docker compose up --detach
    - pytest -s
    - docker ps -a
  after_script:
    - echo Stopping all containers
    - docker stop $(docker ps -aq) && docker rm $(docker ps -aq)
    - echo Removing volumes
    - docker volume rm crew_config || true
    - docker volume rm crew_pgdata || true