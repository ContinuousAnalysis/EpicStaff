installer-macos:
  stage: build-installer
  tags:
    - macos-intel
  artifacts:
    paths:
      - artifacts/macos/
  rules:
    - if: '$INSTALLER_JOB == "skip"'
      when: never
    - if: '$INSTALLER_JOB == "force"'
    - if: '$INSTALLER_JOB == "auto"'
      changes:
        - "installer/**/*"
        - "pipeline/installer.yml"

  script:
    - echo "Job started"
    - mkdir -p artifacts/macos
    - cd installer
    - python3.13 -m venv .venv
    - source .venv/bin/activate
    - pip install poetry
    - poetry install --no-root --without win
    - >
      pip install --force-reinstall --no-binary :all: msgpack zstandard
    - |
      pyinstaller installer.py \
      --name epicstaff \
      --onefile \
      --windowed \
      --target-architecture universal2 \
      --add-data 'app/templates:app/templates' \
      --add-data 'app/static:app/static' \
      --hidden-import engineio.async_drivers.threading \
      --distpath ../artifacts/macos
    - deactivate
    - cd ..
    - echo "Build complete. Binary should be in artifacts/macos/epicstaff.app"

installer-windows:
  stage: build-installer
  tags:
    - windows
  artifacts:
    paths:
      - artifacts/windows/
  rules:
    - if: '$INSTALLER_JOB == "skip"'
      when: never
    - if: '$INSTALLER_JOB == "force"'
    - if: '$INSTALLER_JOB == "auto"'
      changes:
        - "installer/**/*"
        - "pipeline/installer.yml"


  script:
    - echo "Job started"
    - mkdir -p artifacts/windows
    - cd installer
    - C:\Users\crewai\AppData\Local\Programs\Python\Python313\python -m venv .venv
    - .venv/Scripts/activate
    - pip install poetry
    - poetry install --no-root
    - pyinstaller installer.py --name epicstaff.exe --onefile --add-data 'app/templates:app/templates' --add-data 'app/static:app/static' --hidden-import engineio.async_drivers.threading --distpath ../artifacts/windows
    - deactivate
    - cd ..
    - echo "Build complete. Binary should be in artifacts/windows/epicstaff.exe"


installer-linux:
  extends: .docker-login
  stage: build-installer
  tags:
    - docker
  artifacts:
    paths:
      - artifacts/linux/
  variables:
    IMAGE_NAME: "installer-linux-$CI_COMMIT_SHORT_SHA"
    CONTAINER_NAME: "installer-container-$CI_COMMIT_SHORT_SHA"
  rules:
    - if: '$INSTALLER_JOB == "skip"'
      when: never
    - if: '$INSTALLER_JOB == "force"'
    - if: '$INSTALLER_JOB == "auto"'
      changes:
        - "installer/**/*"
        - "pipeline/installer.yml"

  script:
    - echo "Job started"
    - mkdir -p artifacts/linux
    - cd installer
    - docker build -t $IMAGE_NAME --file Dockerfile.installer .
    - cd ..
    - mkdir -p artifacts/linux
    
    - docker create --name $CONTAINER_NAME $IMAGE_NAME
    - docker cp $CONTAINER_NAME:/out artifacts/linux/epicstaff
    - echo "Build complete. Binary should be in artifacts/linux/epicstaff"

  
  after_script:
    - ls -l artifacts/linux/
    - docker rm -f $CONTAINER_NAME || true
    - docker rmi $IMAGE_NAME || true
    - echo "Installer build process finished."