services:
  django_app:
    image: django_app
    build:
      context: ./django_app
      dockerfile: Dockerfile.dj
    command: ./entrypoint.sh
    container_name: django_app
    ports:
      - "8000:8000"
    environment:
      - CODE_RESULT_CHANNEL=code_results
      - CODE_EXEC_TASK_CHANNEL=code_exec_tasks
      - GRAPH_MESSAGE_UPDATE_CHANNEL=graph:message:update
      - GRAPH_MESSAGES_CHANNEL=graph:messages
      - SESSION_STATUS_CHANNEL=sessions:session_status
      - MEMORY_UPDATE_CHANNEL=memory:update

      - DEBUG=${DEBUG:-True}
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
    
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}

      - DB_HOST_NAME=${DB_HOST_NAME}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}      
      

      - GUNICORN_WORKERS=${GUNICORN_WORKERS}
      - GUNICORN_THREADS=${GUNICORN_THREADS}
    volumes:
      - crew_config:/home/user/root/app/env_config

    networks:
      - backend-network
    depends_on:
      crewdb:
        condition: service_started
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/ht/"]
      interval: 30s
      timeout: 10s
      retries: 12
      
  realtime:
    image: realtime
    container_name: realtime
    build:
      context: ./realtime
      dockerfile: Dockerfile.realtime
    ports:
    - "8050:8050"
    environment:
      - KNOWLEDGE_SEARCH_GET_CHANNEL=knowledge:search:get
      - KNOWLEDGE_SEARCH_RESPONSE_CHANNEL=knowledge:search:response
      - REALTIME_AGENTS_SCHEMA_CHANNEL=realtime_agents:schema

      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - MANAGER_HOST=${MANAGER_HOST}
      - MANAGER_PORT=${MANAGER_PORT}
      - DB_NAME=${POSTGRES_DB}
      - DB_HOST_NAME=${DB_HOST_NAME}
      - DB_PORT=${DB_PORT}
      - DB_REALTIME_USER=${DB_REALTIME_USER}
      - DB_REALTIME_PASSWORD=${DB_REALTIME_PASSWORD}

    networks:
      - backend-network
    depends_on:
      crewdb:
        condition: service_healthy
      manager:
        condition: service_started
      redis:
        condition: service_started
      knowledge:
        condition: service_started
      django_app:
        condition: service_healthy

  manager:
    image: manager
    build:
      context: .
      dockerfile: ./manager/Dockerfile.man
    env_file:
      - .env
    container_name: manager_container
    ports:
      - "8001:8000"
    environment:
      - PULL_TOOL=${PULL_TOOL}
      - MANAGER_PORT=${MANAGER_PORT}
      
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - DB_NAME=${POSTGRES_DB}
      - DB_HOST_NAME=${DB_HOST_NAME}
      - DB_PORT=${DB_PORT}
      - DB_MANAGER_USER=${DB_MANAGER_USER}
      - DB_MANAGER_PASSWORD=${DB_MANAGER_PASSWORD}
      - CREW_SAVEFILES_PATH=${CREW_SAVEFILES_PATH}
    volumes:
      - ${DOCKER_SOCK_PATH}:${DOCKER_SOCK_PATH}
      - ${DOCKER_BIN_PATH}:${DOCKER_BIN_PATH}
    networks:
      - backend-network
    tty: true
    stdin_open: true
    depends_on:
      crewdb:
        condition: service_healthy
      redis:
        condition: service_started      

  crewdb:
    image: crewdb
    build:
      context: ./crewdb
      dockerfile: Dockerfile.crewdb
    container_name: crewdb
    ports:
      - "${DB_PORT}:${DB_PORT}"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=${PGDATA}
      - DB_MANAGER_USER=${DB_MANAGER_USER}
      - DB_MANAGER_PASSWORD=${DB_MANAGER_PASSWORD}

      - DB_KNOWLEDGE_USER=${DB_KNOWLEDGE_USER}
      - DB_KNOWLEDGE_PASSWORD=${DB_KNOWLEDGE_PASSWORD}

      - DB_REALTIME_USER=${DB_REALTIME_USER}
      - DB_REALTIME_PASSWORD=${DB_REALTIME_PASSWORD}

      - DB_CREW_USER=${DB_CREW_USER}
      - DB_CREW_PASSWORD=${DB_CREW_PASSWORD}
    volumes:
      - crew_pgdata:${PGDATA}
    networks:
      - backend-network
    healthcheck:
      test: |
        bash -c '
          # First check if postgres is ready
          pg_isready -U postgres || exit 1
          
          # Then check if users have been created
          /usr/local/bin/custom-docker-entrypoint.sh healthcheck-users
        '
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 15s
      
  redis:
    image: redis
    container_name: redis
    networks:
      - backend-network
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 5s

  redis-monitor:
    image: redis-monitor
    build:
      context: .
      dockerfile: redis-monitor/Dockerfile.redis-monitor
    container_name: redis-monitor
    environment:
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - CHECK_INTERVAL=${REDIS_CHECK_INTERVAL:-5}
      - MAX_FAILURES=${REDIS_MAX_FAILURES:-1}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./.env:/mount/.env
    networks:
      - backend-network
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  crew:
    image: crew
    build:
      context: .
      dockerfile: ./crew/Dockerfile.crew
    container_name: crew
    ports:
      - "8002:8000"
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - MANAGER_HOST=${MANAGER_HOST}
      - MANAGER_PORT=${MANAGER_PORT}
      - HAYSTACK_TELEMETRY_ENABLED=${HAYSTACK_TELEMETRY_ENABLED}
      - ANONYMIZED_TELEMETRY=${ANONYMIZED_TELEMETRY}
      - EC_TELEMETRY=${EC_TELEMETRY}
      - MONITORING_MODE=${MONITORING_MODE}
      - DB_NAME=${POSTGRES_DB}
      - DB_HOST_NAME=${DB_HOST_NAME}
      - DB_PORT=${DB_PORT}
      - DB_CREW_USER=${DB_CREW_USER}
      - DB_CREW_PASSWORD=${DB_CREW_PASSWORD}
      - SESSION_STATUS_CHANNEL=sessions:session_status
      - CODE_RESULT_CHANNEL=code_results
    volumes:
      - ${DOCKER_SOCK_PATH}:${DOCKER_SOCK_PATH}
      - ${DOCKER_BIN_PATH}:${DOCKER_BIN_PATH}
      - crew_config:/home/user/root/app/env_config/
    networks:
      - backend-network
    tty: true
    stdin_open: true
    depends_on:
      crewdb:
        condition: service_healthy
      redis:
        condition: service_started

  sandbox:
    image: sandbox
    build:
      context: .
      dockerfile: ./sandbox/Dockerfile.sandbox
    container_name: sandbox
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - CODE_RESULT_CHANNEL=code_results
      - CODE_EXEC_TASK_CHANNEL=code_exec_tasks
      - BASE_VENV_PATH=${BASE_VENV_PATH}
      - OUTPUT_PATH=${OUTPUT_PATH}
    volumes:
      - sandbox_venvs:${BASE_VENV_PATH}
      - sandbox_executions:${OUTPUT_PATH}
      - ${CREW_SAVEFILES_PATH}:${CONTAINER_SAVEFILES_PATH}

    networks:
      - backend-network
    tty: true
    stdin_open: true
    depends_on:
      - redis
  knowledge:
    image: knowledge
    build:
      context: ./knowledge
      dockerfile: Dockerfile.knowledge
    container_name: knowledge
    environment:
      - KNOWLEDGE_SOURCES_CHANNEL=knowledge_sources
      - KNOWLEDGE_SEARCH_GET_CHANNEL=knowledge:search:get
      - KNOWLEDGE_SEARCH_RESPONSE_CHANNEL=knowledge:search:response

      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - DB_NAME=${POSTGRES_DB}
      - DB_HOST_NAME=${DB_HOST_NAME}
      - DB_PORT=${DB_PORT}
      - DB_KNOWLEDGE_USER=${DB_KNOWLEDGE_USER}
      - DB_KNOWLEDGE_PASSWORD=${DB_KNOWLEDGE_PASSWORD}
    networks:
      - backend-network
    tty: true
    stdin_open: true
    depends_on:
      crewdb:
        condition: service_healthy
      redis:
        condition: service_started

  frontend:
    image: frontend
    build:
      context: ../frontend
      dockerfile: Dockerfile.fe
    container_name: frontend
    ports:
     - "4200:80"
    networks:
     - frontend-network
    volumes:
     - ../frontend-config/frontend-config.json:/usr/share/nginx/html/config.json:ro

volumes:
  sandbox_venvs:
    external: true
    
  sandbox_executions:
    external: true

  crew_pgdata:
    external: true
      
  crew_config:
    external: true
  

networks:
  backend-network:
    driver: bridge

  frontend-network:
    driver: bridge
