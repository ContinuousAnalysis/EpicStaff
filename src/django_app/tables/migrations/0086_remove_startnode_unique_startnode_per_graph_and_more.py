# Generated by Django 5.1.3 on 2025-05-22 08:30

import django.db.models.deletion
from django.db import migrations, models
from django.db.models import Count


def deduplicate_constraints(apps, schema_editor):
    def deduplicate(model_name, group_by_fields, keep="min_id"):
        Model = apps.get_model("tables", model_name)
        duplicates = (
            Model.objects.values(*group_by_fields)
            .annotate(count=Count("id"))
            .filter(count__gt=1)
        )
        for dup in duplicates:
            filters = {field: dup[field] for field in group_by_fields}
            ids = list(Model.objects.filter(**filters).values_list("id", flat=True))
            if keep == "min_id":
                keep_id = min(ids)
            else:
                keep_id = ids[0]
            ids.remove(keep_id)
            Model.objects.filter(id__in=ids).delete()

    deduplicate("ConditionalEdge", ["graph_id", "source"])
    deduplicate("CrewNode", ["graph_id", "node_name"])
    deduplicate("Edge", ["graph_id", "start_key", "end_key"])
    deduplicate("LLMNode", ["graph_id", "node_name"])
    deduplicate("PythonNode", ["graph_id", "node_name"])
    deduplicate("StartNode", ["graph_id"])  # Since only one StartNode per graph is allowed


class Migration(migrations.Migration):

    dependencies = [
        ("tables", "0085_merge_20250429_1542"),
    ]

    operations = [
        migrations.RemoveConstraint(
            model_name="startnode",
            name="unique_startnode_per_graph",
        ),
        migrations.AlterField(
            model_name="crewnode",
            name="crew",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="tables.crew"
            ),
        ),
        migrations.AlterField(
            model_name="startnode",
            name="graph",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="start_node_list",
                to="tables.graph",
            ),
        ),
        migrations.RunPython(deduplicate_constraints, reverse_code=migrations.RunPython.noop),
        migrations.AddConstraint(
            model_name="conditionaledge",
            constraint=models.UniqueConstraint(
                fields=("graph", "source"), name="unique_graph_conditional_edge_source"
            ),
        ),
        migrations.AddConstraint(
            model_name="crewnode",
            constraint=models.UniqueConstraint(
                fields=("graph", "node_name"),
                name="unique_graph_node_name_for_crew_node",
            ),
        ),
        migrations.AddConstraint(
            model_name="edge",
            constraint=models.UniqueConstraint(
                fields=("graph", "start_key", "end_key"), name="unique_graph_edge"
            ),
        ),
        migrations.AddConstraint(
            model_name="llmnode",
            constraint=models.UniqueConstraint(
                fields=("graph", "node_name"),
                name="unique_graph_node_name_for_llm_node",
            ),
        ),
        migrations.AddConstraint(
            model_name="pythonnode",
            constraint=models.UniqueConstraint(
                fields=("graph", "node_name"),
                name="unique_graph_node_name_for_python_node",
            ),
        ),
        migrations.AddConstraint(
            model_name="startnode",
            constraint=models.UniqueConstraint(
                fields=("graph",), name="unique_graph_start_node"
            ),
        ),
    ]
