# Generated by Django 5.1.3 on 2025-04-17 10:02

from django.db import migrations
import re


def make_collection_names_unique(apps, schema_editor):
    SourceCollection = apps.get_model("tables", "SourceCollection")

    users = SourceCollection.objects.values_list("user_id", flat=True).distinct()

    for user_id in users:

        user_collections = SourceCollection.objects.filter(user_id=user_id)

        seen_names = {}

        for collection in user_collections:
            base_name = collection.collection_name or "Untitled Collection"

            match = re.match(r"^(.*?)( \(\d+\))?$", base_name)
            if match:
                clean_base_name = match.group(1)
            else:
                clean_base_name = base_name

            if clean_base_name in seen_names:

                index = seen_names[clean_base_name]
                new_name = f"{clean_base_name} ({index})"
                seen_names[clean_base_name] = index + 1

                collection.collection_name = new_name
                collection.save(update_fields=["collection_name"])
            else:

                seen_names[clean_base_name] = 1

                if clean_base_name != base_name:
                    collection.collection_name = clean_base_name
                    collection.save(update_fields=["collection_name"])


def reverse_migration(apps, schema_editor):

    pass


class Migration(migrations.Migration):

    dependencies = [
        (
            "tables",
            "0079_rename_realtime_model_realtimetranscriptionconfig_realtime_transcription_model_and_more",
        ),
    ]

    operations = [
        migrations.RunPython(make_collection_names_unique, reverse_migration),
    ]
